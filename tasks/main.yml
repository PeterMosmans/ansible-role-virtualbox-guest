---
# tasks file for virtualbox-guest
- name: Remove OS installation of virtualbox guest additions
  package:
    name: "{{ virtualbox_os_packages }}"
    state: absent
  when: virtualbox_remove_os_packages is defined and virtualbox_remove_os_packages

- block:
    - name: Determine the host version
      shell: "VBoxManage --version | awk -F'[r_]' '{print $1}'"
      delegate_to: localhost
      register: host_vbox_version
      become: no

    - name: Check if virtualbox_version could be determined
      fail:
        msg: >-
          Could not determine host VirtualBox version.
          Probably you are running Ansible and VirtualBox from different hosts.
          Please specify variable "virtualbox_version".
      when: not host_vbox_version.stdout

    - name: Set virtualbox_version to host version
      set_fact:
        virtualbox_version: "{{ host_vbox_version.stdout }}"

  when: virtualbox_version == "auto"

- name: Determine if (the requested version of) vboxguestadditions is installed
  shell: modinfo vboxguest 2>/dev/null|awk '/^version/{print $2}'
  register: vbox_guest_version
  changed_when: vbox_guest_version.stdout != virtualbox_version
  ignore_errors: yes

- block:
    - name: "Copy ISO file from guest to host"
      copy:
        src: "{{ local_virtualbox_iso }}"
        dest: "{{ virtualbox_iso }}"
        owner: root
        group: root
        mode: "0644"
      when: local_virtualbox_iso is defined and virtualbox_iso is defined

    - name: Check if the ISO file is present on the host
      stat:
        path: "{{ virtualbox_iso }}"
      register: file_path
      ignore_errors: yes

    - name: Check if the CD is present on the host
      stat: path=/dev/sr0
      register: CD_path
      ignore_errors: yes
      when: file_path.stat.exists is not defined

    - name: Check if CD or ISO file is present on the host
      block:
        - debug:
            msg: "Could not find necessary CD or ISO file on the host. Attempting to download..."

        - name: Download ISO file when the requested version is not present on the host
          get_url:
            url: http://download.virtualbox.org/virtualbox/{{ virtualbox_version }}/VBoxGuestAdditions_{{ virtualbox_version }}.iso
            dest: "{{ virtualbox_iso }}"

        - name: Re-check if the ISO file is present on the host
          stat:
            path: "{{ virtualbox_iso }}"
            register: file_path

        - name: Fail if CD or ISO file is still not present on the host
          fail:
            msg: "Could not find necessary CD or ISO file on the host, nor download it"
          when: file_path.stat.exists is not defined

      when: file_path.stat.exists is not defined and CD_path.stat.exists is not defined

    - name: Use correct ISO path (file or CD)
      set_fact:
        ISO_path: "{{ file_path.stat.path if file_path.stat.exists else CD_path.stat.path }}"

    - name: Check if VBoxGuest additions ISO is mounted
      shell: mount -l 2>/dev/null|awk '/VBox_GAs/{print $3}'
      args:
        warn: False
      register: mount_path
      changed_when: mount_path is defined and not mount_path.stdout

    - name: Check if VBoxGuest additions ISO is mounted
      shell: mount -l 2>/dev/null|awk '/VBox_GAs/{print $3}'
      args:
        warn: False
      register: mount_path

    - name: Set package names for RedHat family OS
      set_fact:
        kernel_package_name: "kernel"
        kernel_headers_name: "kernel-devel"
        package_list_command: "rpm -qa"
      when: ansible_os_family == "RedHat"

    - block:
        - name: Get Debian architecture
          shell: "dpkg --print-architecture"
          register: debian_architecture
          changed_when: false
          failed_when: not debian_architecture.stdout
        - name: Set package names for Debian family OS
          set_fact:
            # apt requires to set at least architecture
            kernel_package_name: "linux-image-{{ debian_architecture.stdout }}"
            # headers package name will be appended with full version specification
            kernel_headers_name: "linux-headers"
            package_list_command: "dpkg -l"
      when: ansible_os_family == "Debian"

    - name: Update kernel
      package:
        name: "{{ kernel_package_name }}"
        state: latest
      register: kernel_updated
      when: virtualbox_use_latest_kernel | bool

    - name: Reboot VM into latest kernel
      reboot:
      when: kernel_updated.changed

    - name: Mount VBoxGuestAdditions
      mount:
        name: /media/cdrom
        src: "{{ ISO_path }}"
        fstype: iso9660
        opts: noauto
        state: mounted
      register: mounted_ISO
      when: mount_path is defined and not mount_path.stdout

    - name: Save the current list of packages
      shell: "{{ package_list_command }} > /tmp/before.txt"
      when: virtualbox_keep is undefined or not virtualbox_keep
      changed_when: false

    - name: Get running kernel version
      shell: "uname -r"
      register: kernel_version
      failed_when: not kernel_version.stdout
      changed_when: false

    - name: Install kernel headers corresponding to running kernel
      package:
        name: "{{ kernel_headers_name }}-{{ kernel_version.stdout }}"
        state: present
      register: kernel_headers_installed
      failed_when: false

    - name: Check if kernel headers installed
      fail:
        msg: >-
          Could not install package {{ kernel_headers_name }}-{{ kernel_version.stdout }}.
          Probably, it's already removed from repositories. Try to set variable
          virtualbox_use_latest_kernel to true. Latest kernel will be installed, and VM
          will be reboot to it. Package manager returned: {{ kernel_headers_installed.msg }}
      when: kernel_headers_installed.msg is defined and kernel_headers_installed.msg != ""

    - block:
        - name: Install EPEL repo.
          yum:
            name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm
            state: present
            # those packages could be unsigned; in some case "no signature" == error
            disable_gpg_check: True
        - name: Import EPEL GPG key.
          rpm_key:
            key: /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}
            state: present
        - name: Install elfutils
          package:
            name: "elfutils-libelf-devel"
      when: ansible_os_family == "RedHat"

    - name: Install necessary packages for compiling
      package:
        name:
          - "bzip2"
          - "dkms"
          - "gcc"
          - "make"
        state: present

    - name: Uninstall previous VBoxGuestAdditions
      shell: echo "yes" | /media/cdrom/VBoxLinuxAdditions.run uninstall
      when: vbox_guest_version.stdout is defined
      ignore_errors: yes

    - name: Build and install x11 VBoxGuestAdditions from file
      shell: /media/cdrom/VBoxLinuxAdditions.run
      when: virtualbox_x11 is defined and virtualbox_x11
      register: install_result
      failed_when: install_result.rc != 0 and install_result.rc != 2

    - name: Build and install VBoxGuestAdditions from file
      shell: /media/cdrom/VBoxLinuxAdditions.run --nox11
      when: virtualbox_x11 is undefined or not virtualbox_x11
      register: install_result
      failed_when: install_result.rc != 0 and install_result.rc != 2

    # VBoxLinuxAdditions.run returns status 2 when there was already running
    # modules, and installer can't unload them (reboot required).
    # Unfortunately, checksum errors return the same status 2.
    # So, we also check if kernel module is actually built.

    - name: Check if vboxguest.ko for running kernel is present
      stat:
        path: "/lib/modules/{{ kernel_version.stdout }}/misc/vboxguest.ko"
        get_checksum: false
        get_attributes: false
      register: vboxguest_ko_path
      failed_when: not vboxguest_ko_path.stat

    - name: Unmount VBoxGuestAdditions
      mount:
        name: "{{ mount_path.stdout }}"
        src: "{{ ISO_path }}"
        fstype: iso9660
        state: unmounted
      when: mounted_ISO is changed

    - block:
        - name: Check which packages were installed
          shell: "{{ package_list_command }} > /tmp/after.txt"

        - name: Create a list of packages that were installed for compilation
          shell: diff --ignore-all-space /tmp/before.txt /tmp/after.txt|awk '/>/{print $3}'
          register: installed

        - name: Remove packages that were installed for compilation
          package:
            name: "{{ installed.stdout_lines }}"
            state: absent

      when: virtualbox_keep is undefined or not virtualbox_keep

    - name: Remove build logfiles, artefacts, and the ISO file
      file:
        name: "{{ item }}"
        follow: yes
        state: absent
      loop:
        - "/opt/VBoxGuestAdditions-{{ virtualbox_version }}/src"
        - "{{ virtualbox_iso }}"
        - /tmp/before.txt
        - /tmp/after.txt
        - "/usr/src/vboxguest-{{ virtualbox_version }}"
        - /var/lib/dkms/vboxguest
        - /var/log/vboxadd-install.log
        - /var/log/vboxadd-install-x11.log
        - /var/log/vboxadd-setup.log
        - /var/log/VBoxGuestAdditions.log
        - /var/log/VBoxGuestAdditions-uninstall.log

    - name: Remove cdrom fstab entry
      lineinfile: >
        dest=/etc/fstab
        regexp='^{{ ISO_path }}'
        line='{{ ISO_path }}	{{ mount_path.stdout }}	iso9660	noauto	0	0'
        state=absent
      when: mounted_ISO is changed

    - name: Reboot to replace running modules
      reboot:
      when: install_result.rc == 2


  when: (vbox_guest_version.stdout != virtualbox_version)
