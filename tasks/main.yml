---
# tasks file for virtualbox-guest
- block:
  - name: remove os packages version of virtualbox guest additions
    apt: name="{{ item }}" state="absent" purge="yes"
    with_items: "{{ virtualbox_os_packages }}"
    when: virtualbox_remove_os_packages is defined and virtualbox_remove_os_packages

- block:
  - name: If virtualbox_version is set to auto then determine the host version
    local_action: shell vboxmanage --version | awk -F r '{print $1}'
    register: host_vbox_version

  - name: Check if virtualbox_version could be determined
    fail: msg="Could not determine virtualbox_version - please specify this variable"
    when: host_vbox_version.stdout == ""

  - name: Override virtualbox_version if defaults set to auto
    set_fact: virtualbox_version="{{ host_vbox_version.stdout }}"

  when: virtualbox_version == "auto"

- name: Determine if (the requested version of) vboxguestadditions is installed
  shell: modinfo vboxguest 2>/dev/null|awk '/^version/{print $2}'
  register: vbox_guest_version
  changed_when: vbox_guest_version.stdout != "{{ virtualbox_version }}"
  ignore_errors: yes

- block:
  - name: Check if the ISO file is present on the host
    stat: path=/root/VBoxGuestAdditions.iso
    register: file_path
    ignore_errors: yes

  - name: Check if the CD is present on the host
    stat: path=/dev/sr0
    register: CD_path
    ignore_errors: yes
    when: not file_path.stat.exists

  - name: Check if CD or ISO file is present on the host
    debug: msg="Could not find necessary CD or ISO file on the host. Attempting to download..."
    when: not file_path.stat.exists and not CD_path.stat.exists

  - name: Download ISO file when the requested version is not present on the host
    get_url: url=http://download.virtualbox.org/virtualbox/{{ virtualbox_version }}/VBoxGuestAdditions_{{ virtualbox_version }}.iso dest=/root/VBoxGuestAdditions.iso
    ignore_errors: yes
    when: not file_path.stat.exists and not CD_path.stat.exists

  - name: Re-check if the ISO file is present on the host
    stat: path=/root/VBoxGuestAdditions.iso
    register: file_path
    ignore_errors: yes

  - name: Fail if CD or ISO file is still not present on the host
    fail: msg="Could not find necessary CD or ISO file on the host."
    when: not file_path.stat.exists and not CD_path.stat.exists

  - name: Use correct ISO path (file or CD)
    set_fact: ISO_path="{{ file_path.stat.path if file_path.stat.exists else CD_path.stat.path }}"

  - name: Check if VBoxGuest additions ISO is mounted
    shell: mount -l 2>/dev/null|awk '/VBOXADDITIONS/{print $3}'
    register: mount_path
    changed_when: mount_path is defined and mount_path.stdout != ""

  - name: Mount VBoxGuestAdditions
    mount:
      name=/media/cdrom
      src={{ ISO_path }}
      fstype=iso9660
      opts=noauto
      state=mounted
    register: mounted_ISO
    when: mount_path is defined and "{{ mount_path.stdout }}" == ""

  - name: Check if VBoxGuest additions ISO is mounted
    shell: mount -l 2>/dev/null|awk '/VBOXADDITIONS/{print $3}'
    register: mount_path

  - name: Find out kernel version
    shell: uname -r
    register: kernel
    changed_when: kernel.stdout == ""

  - name: Find out architecture-independent kernel name
    shell: uname -r | sed 's/-[az].*$//'
    register: kernel_common
    changed_when: kernel_common.stdout == ""

  - name: Save the current list of packages
    shell: aptitude search '~i!~M' > /tmp/before.txt
    when: virtualbox_keep is undefined or not virtualbox_keep

  - name: Install necessary packages for compiling
    apt:
      name={{ item }}
      update_cache=yes
      cache_valid_time=86400
      install-recommends=no
      state=present
    with_items:
      - bzip2
      - dkms
      - gcc
      - make
      - linux-headers-{{ kernel.stdout }}

  - name: Check which packages were installed
    shell: aptitude search '~i!~M' > /tmp/after.txt
    when: virtualbox_keep is undefined or not virtualbox_keep

  - name: Create a list of installed packages
    shell: diff /tmp/before.txt /tmp/after.txt|awk '/>/{print $3}'
    register: installed
    when: virtualbox_keep is undefined or not virtualbox_keep

  - name: Build and install x11 VBoxGuestAdditions from file
    shell: /bin/bash /media/cdrom/VBoxLinuxAdditions.run
    when: virtualbox_x11 is defined and virtualbox_x11
    ignore_errors: yes

  - name: Build and install VBoxGuestAdditions from file
    shell: /bin/bash /media/cdrom/VBoxLinuxAdditions.run --nox11
    when: virtualbox_x11 is undefined or not virtualbox_x11
    ignore_errors: yes

  - name: Unmount VBoxGuestAdditions
    mount:
      name={{ mount_path.stdout }}
      src={{ ISO_path }}
      fstype=iso9660
      state=unmounted
    when: mounted_ISO | changed

  - name: Remove installed packages for compiling
    apt:
      name={{ item }}
      state=absent
      update_cache=yes
      cache_valid_time=86400
    with_items: "{{ installed.stdout_lines }}"
    when: virtualbox_keep is undefined or not virtualbox_keep

  - name: Remove build logfiles, artefacts and ISO files
    file: name={{ item}} follow=yes state=absent
    with_items:
      - "/opt/VBoxGuestAdditions-{{ virtualbox_version }}/src"
      - /root/VBoxGuestAdditions.iso
      - /tmp/before.txt
      - /tmp/after.txt
      - "/usr/src/vboxguest-{{ virtualbox_version }}"
      - /var/lib/dkms/vboxguest
      - /var/log/vboxadd-install.log
      - /var/log/vboxadd-install-x11.log
      - /var/log/VBoxGuestAdditions.log
      - /var/log/VBoxGuestAdditions-uninstall.log

  - name: Remove cdrom fstab entry
    lineinfile: >
      dest=/etc/fstab
      regexp='^{{ ISO_path }}'
      line='{{ ISO_path }}	{{ mount_path.stdout }}	iso9660	noauto	0	0'
      state=absent
    when: mounted_ISO | changed

  - name: Install some dependencies for Virtualbox Guest Additions (vbox-greeter)
    apt: name="{{ item }}"
    with_items:
      - "libfltk1.3"
      - "libfltk-images1.3"

  when: (vbox_guest_version.stdout != "{{ virtualbox_version }}")
